// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  taskUpdates   TaskUpdate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String
  status      String
  note        String
  creator     String
  createAt    DateTime
  assignedId  String
  taskUpdates TaskUpdate[]
  reports     Report[]
  user        User         @relation(fields: [assignedId], references: [id], onDelete: Cascade)
}

model TaskUpdate {
  id       String   @id @default(cuid())
  status   String
  updateAt DateTime
  taskId   String
  updateBy String
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [updateBy], references: [id], onDelete: Cascade)
}

model Report {
  id         String   @id @default(cuid())
  isComplete Boolean
  reportDate DateTime
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
