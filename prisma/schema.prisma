// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider          = "postgresql"
  // url               = env("DATABASE_URL")
  url               = env("POSTGRES_PRISMA_URL")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  taskDefaults  TaskDefault[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                String     @id @default(cuid())
  title             String
  status            String
  creator           String
  createAt          DateTime
  deadlines         DateTime
  priority          String
  assignedId        String
  description       String[]
  checked           String[]
  tokenNoticafition String?
  medias            Media[]
  todoList          TodoList[]
  history           History[]
  user              User       @relation(fields: [assignedId], references: [id], onDelete: Cascade)
}

model Media {
  id       String   @id @default(cuid())
  url      String
  status   String?
  taskId   String
  userId   String
  createAt DateTime
  updateAt DateTime
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Report {
  id                   String   @id @default(cuid())
  assignedTo           String
  reportDate           DateTime
  jobCompleted         Int
  jobUnfinished        Int
  jobCompletedPrecent  Int
  jobUnfinishedPercent Int
  kpi                  String
}

model TodoList {
  id        String   @id @default(cuid())
  isChecked String[]
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model History {
  id       String   @id @default(cuid())
  content  String
  action   String
  taskId   String
  createAt DateTime
  userId   String
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskDefault {
  id         String   @id @default(cuid())
  content    String?
  jobDetails String[]
  date       DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id    String @id @default(cuid())
  email String
}
